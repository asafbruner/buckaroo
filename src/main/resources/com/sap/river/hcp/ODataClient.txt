/*******************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 ******************************************************************************/

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.olingo.odata2.api.commons.HttpStatusCodes;
import org.apache.olingo.odata2.api.edm.Edm;
import org.apache.olingo.odata2.api.edm.EdmEntityContainer;
import org.apache.olingo.odata2.api.edm.EdmEntitySet;
import org.apache.olingo.odata2.api.edm.EdmException;
import org.apache.olingo.odata2.api.edm.EdmFunctionImport;
import org.apache.olingo.odata2.api.edm.provider.FunctionImportParameter;
import org.apache.olingo.odata2.api.ep.EntityProvider;
import org.apache.olingo.odata2.api.ep.EntityProviderException;
import org.apache.olingo.odata2.api.ep.EntityProviderReadProperties;
import org.apache.olingo.odata2.api.ep.EntityProviderWriteProperties;
import org.apache.olingo.odata2.api.ep.entry.ODataEntry;
import org.apache.olingo.odata2.api.ep.feed.ODataDeltaFeed;
import org.apache.olingo.odata2.api.ep.feed.ODataFeed;
import org.apache.olingo.odata2.api.exception.ODataException;
import org.apache.olingo.odata2.api.processor.ODataResponse;

/**
 *
 */
public class ODataClient {
	public static final String HTTP_METHOD_PUT = "PUT";
	public static final String HTTP_METHOD_POST = "POST";
	public static final String HTTP_METHOD_GET = "GET";
	private static final String HTTP_METHOD_DELETE = "DELETE";

	public static final String HTTP_HEADER_CONTENT_TYPE = "Content-Type";
	public static final String HTTP_HEADER_ACCEPT = "Accept";

	public static final String APPLICATION_JSON = "application/json";
	public static final String APPLICATION_XML = "application/xml";
	public static final String APPLICATION_ATOM_XML = "application/atom+xml";
	public static final String APPLICATION_FORM = "application/x-www-form-urlencoded";
	public static final String METADATA = "$metadata";
	public static final String INDEX = "/index.jsp";
	public static final String SEPARATOR = "/";

	//public static final String BUCKAROOURL = "https://buckaroodemosapriver.neo.ondemand.com/buckaroodemo-0.1.0.BUILD-SNAPSHOT";

	private String serviceUrl;
	private String authToken;
	
	public static final boolean PRINT_RAW_CONTENT = true;

	private static void print(String content) {
		System.out.println(content);
	}

	public String getEndpoint() {
		return serviceUrl;
	}

	public void setEndpoint(String endpoint) {
		this.serviceUrl = endpoint;
	}
	
	public String getAuthToken() {
		return authToken;
	}

	public void setAuthToken(String authToken) {
		this.authToken = authToken;
	}
	

	public Edm readEdm() throws IOException, ODataException {
		InputStream content = execute(serviceUrl + SEPARATOR + METADATA, APPLICATION_XML, HTTP_METHOD_GET);
		return EntityProvider.readMetadata(content, false);
	}

	public ODataFeed readFeed(Edm edm, String contentType, String entitySetName) throws IOException, ODataException {
		EdmEntityContainer entityContainer = edm.getDefaultEntityContainer();
		String absolutUri = createUri(serviceUrl, entitySetName, null);

		InputStream content = execute(absolutUri, contentType, HTTP_METHOD_GET);
		return EntityProvider.readFeed(contentType, entityContainer.getEntitySet(entitySetName), content, EntityProviderReadProperties
				.init().build());
	}

	public ODataEntry readEntry(Edm edm, String contentType, String entitySetName, String keyValue) throws IOException,
			ODataException {
		return readEntry(edm, contentType, entitySetName, keyValue, null);
	}

	public ODataEntry readEntry(Edm edm, String contentType, String entitySetName, String keyValue,
			String expandRelationName) throws IOException, ODataException {
		// working with the default entity container
		EdmEntityContainer entityContainer = edm.getDefaultEntityContainer();
		// create absolute uri based on service uri, entity set name with its key property value and optional expanded relation name
		String absolutUri = createUri(entitySetName, keyValue, expandRelationName);

		InputStream content = execute(absolutUri, contentType, HTTP_METHOD_GET);

		return EntityProvider.readEntry(contentType, entityContainer.getEntitySet(entitySetName), content, EntityProviderReadProperties
				.init().build());
	}
	
	public Object invokeFunction(EdmFunctionImport f, Map<String, Object>parameters, String contentType) throws IOException, ODataException {
		String absolutUri = createFunctionURI(f.getName(), parameters);
		InputStream content = execute(absolutUri, contentType, HTTP_METHOD_GET);
		
		StringWriter writer = new StringWriter();
		IOUtils.copy(content, writer, Charset.defaultCharset());
		String result = writer.toString();
		print(result);
		return result;
		//return EntityProvider.readFunctionImport(contentType, f, content,  EntityProviderReadProperties.init().build());
	}


	private HttpStatusCodes checkStatus(HttpURLConnection connection) throws IOException {
		HttpStatusCodes httpStatusCode = HttpStatusCodes.fromStatusCode(connection.getResponseCode());
		if (400 <= httpStatusCode.getStatusCode() && httpStatusCode.getStatusCode() <= 599) {
			throw new RuntimeException("Http Connection failed with status " + httpStatusCode.getStatusCode() + " "
					+ httpStatusCode.toString() + " " + connection.getResponseMessage());
		}
		return httpStatusCode;
	}

	private String createUri(String entitySetName, String id) {
		return createUri(entitySetName, id, null);
	}
	
	private String createFunctionURI(String functionName, Map<String, Object>parameters) {
		final StringBuilder absolutUri = new StringBuilder(serviceUrl).append(SEPARATOR).append(functionName);
		if (!parameters.isEmpty()) {
			List<String> parameterList = new LinkedList<String>();
			for (Map.Entry<String, Object> paramEntry : parameters.entrySet()) {
				final StringBuilder param = new StringBuilder(paramEntry.getKey()).append("=").append(getParamValue(paramEntry.getValue()));
				parameterList.add(param.toString());
			}
			
			absolutUri.append("?");
			StringUtils.join(parameterList.toArray(new String[] {}), "&");
		}
		
		return absolutUri.toString();
	}
	
	private String getParamValue(Object param) {
		if (param instanceof String) {
			return "'" + (String)param + "'";
		} 
		
		return String.valueOf(param);
	}

	private String createUri(String entitySetName, String id, String expand) {
		final StringBuilder absolutUri = new StringBuilder(serviceUrl).append(SEPARATOR).append(entitySetName);
		if (id != null) {
			absolutUri.append("(").append(id).append(")");
		}
		if (expand != null) {
			absolutUri.append("/?$expand=").append(expand);
		}
		return absolutUri.toString();
	}

	private InputStream execute(String absolutUri, String contentType, String httpMethod) throws IOException {
		HttpURLConnection connection = initializeConnection(absolutUri, contentType, httpMethod);

		connection.connect();
		checkStatus(connection);
//		
//		StringWriter writer = new StringWriter();
//		IOUtils.copy(metadata, writer, Charset.defaultCharset());
//		print(writer.toString());

		InputStream content = connection.getInputStream();
		//content = logRawContent(httpMethod + " request on uri '" + relativeUri + "' with content:\n  ", content, "\n");
		return content;
	}

	// private HttpURLConnection connect(String relativeUri, String contentType, String httpMethod) throws IOException {
	// HttpURLConnection connection = initializeConnection(relativeUri, contentType, httpMethod);
	//
	// connection.connect();
	// checkStatus(connection);
	//
	// return connection;
	// }

	private HttpURLConnection initializeConnection(String absolutUri, String contentType, String httpMethod) throws MalformedURLException,
			IOException {
		URL url = new URL(absolutUri);
		HttpURLConnection connection = (HttpURLConnection) url.openConnection();

		connection.setRequestMethod(httpMethod);
		connection.setRequestProperty("Authorization", authToken/*"Basic UDE5NDA3NzkzODE6MVFhMldzM0Vk"*/);
		connection.setRequestProperty(HTTP_HEADER_CONTENT_TYPE, contentType);
		if (contentType.equals(ODataClient.APPLICATION_JSON)) {
			connection.setRequestProperty(HTTP_HEADER_ACCEPT, contentType);
		}
		if (HTTP_METHOD_POST.equals(httpMethod) || HTTP_METHOD_PUT.equals(httpMethod)) {
			connection.setDoOutput(true);
			connection.setRequestProperty(HTTP_HEADER_CONTENT_TYPE, contentType);
		}

		return connection;
	}
}